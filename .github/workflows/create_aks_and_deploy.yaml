name: Create AKS and Deploy App

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  RG: rg-aks-hello
  LOC: eastus
  ACR_NAME: myacr${{ github.run_number }}
  AKS: aks-hello
  IMAGE_NAME: hello-aks
  IMAGE_TAG: ${{ github.sha }}

jobs:
  create-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      # Step 1: Login to Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 2: Create Resource Group, ACR, and AKS
      - name: Create Azure Resources
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Creating Resource Group..."
            az group create -n $RG -l $LOC
            
            echo "Creating ACR..."
            az acr create -g $RG -n $ACR_NAME --sku Basic
            
            echo "Creating AKS and attaching ACR..."
            az aks create -g $RG -n $AKS --node-count 1 --generate-ssh-keys --attach-acr $ACR_NAME

      # Step 3: Get ACR login server dynamically
      - name: Get ACR Login Server
        id: acr
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "ACR login server: $(az acr show -n $ACR_NAME --query loginServer -o tsv)"
            echo "ACR_LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      # Step 4: Login to ACR
      - name: ACR login
        uses: azure/cli@v2
        with:
          inlineScript: |
            az acr login -n $ACR_NAME

      # Step 5: Build and Push Docker Image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      # Step 6: Get AKS context
      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.AKS }}

      # Step 7: Deploy Application to AKS
      - name: Deploy to AKS
        uses: Azure/k8s-deploy@v4
        with:
          manifests: |
            k8s/hello.yaml
          images: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          strategy: basic
