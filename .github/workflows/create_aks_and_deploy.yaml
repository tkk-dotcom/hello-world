name: create-and-deploy

on:
  push:
    branches: [ main ]

# Reference parameters file
env:
  PARAM_FILE: aks-parameters.jsonc

jobs:
  create-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Load Parameters
      - name: Load parameters
        id: params
        run: |
          echo "##[group]Loading parameters"
          echo "Reading from: $PARAM_FILE"
          cat $PARAM_FILE || { echo "❌ ERROR: Parameters file not found."; exit 1; }
          echo "##[endgroup]"

          # Clean up line endings (CRLF → LF)
          sed -i 's/\r$//' $PARAM_FILE

          # Validate JSON syntax
          echo "Validating JSON syntax..."
          jq . $PARAM_FILE || { echo "❌ ERROR: Invalid JSON syntax in $PARAM_FILE"; exit 1; }

          echo "Extracting values from $PARAM_FILE..."
          SUBSCRIPTION_ID=$(jq -r '.subscriptionId' $PARAM_FILE)
          RESOURCE_GROUP=$(jq -r '.resourceGroup' $PARAM_FILE)
          CLUSTER_NAME=$(jq -r '.aksClusterName' $PARAM_FILE)
          ACR_NAME=$(jq -r '.acrName' $PARAM_FILE)
          IMAGE_NAME=$(jq -r '.imageName' $PARAM_FILE)
          NAMESPACE=$(jq -r '.namespace' $PARAM_FILE)

          echo "##[group]Parsed Values"
          echo "Subscription ID: $SUBSCRIPTION_ID"
          echo "Resource Group:  $RESOURCE_GROUP"
          echo "AKS Cluster:     $CLUSTER_NAME"
          echo "ACR Name:        $ACR_NAME"
          echo "Image Name:      $IMAGE_NAME"
          echo "Namespace:       $NAMESPACE"
          echo "##[endgroup]"

          # Export as environment variables for next steps
          echo "SUBSCRIPTION_ID=$SUBSCRIPTION_ID" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      # Step 3: Azure Login
      - name: Azure Login
        uses: azure/login@v2
        with:

            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
             auth-type: "OIDC" 
    
      # Step 4: Set AKS Context
      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      # Step 5: Build and Push Docker image to ACR
      - name: Build and Push Docker image
        run: |
          echo "Logging into Azure Container Registry..."
          az acr login --name ${{ env.ACR_NAME }}

          IMAGE_TAG=${{ github.run_number }}
          IMAGE_FULL_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG

          echo "Building Docker image: $IMAGE_FULL_NAME"
          docker build -t $IMAGE_FULL_NAME .

          echo "Pushing Docker image to ACR..."
          docker push $IMAGE_FULL_NAME

          echo "IMAGE_FULL_NAME=$IMAGE_FULL_NAME" >> $GITHUB_ENV

      # Step 6: Deploy to AKS
      - name: Deploy to AKS
        run: |
          echo "Deploying to AKS cluster: ${{ env.CLUSTER_NAME }}"
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml

          echo "Waiting for rollout..."
          kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n ${{ env.NAMESPACE }}

          echo "Deployment successful!"
