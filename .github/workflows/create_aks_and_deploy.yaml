name: create-and-deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: RG-AKS-Hello
   
    env:
      RESOURCE_GROUP: RG-AKS-Hello
      AKS_CLUSTER_NAME: aks-hello-world
      ACR_NAME: myakshelloregitry123
      NAMESPACE: default


    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 1: Load parameters
      - name: Load parameters from JSON
        id: load_params
        shell: bash
        run: |
          echo "Reading deployment parameters..."
          echo "File content:"
          cat aks-parameters.json

          echo "Validating JSON structure..."
          jq . aks-parameters.json

          echo "Extracting values..."
          RESOURCE_GROUP=$(jq -r '.parameters.resourceGroup.value' aks-parameters.json)
          AKS_CLUSTER_NAME=$(jq -r '.parameters.aksClusterName.value' aks-parameters.json)
          ACR_NAME=$(jq -r '.parameters.acrName.value' aks-parameters.json)
          NAMESPACE=$(jq -r '.parameters.namespace.value' aks-parameters.json)

          echo "RESOURCE_GROUP=$RESOURCE_GROUP"
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME"
          echo "ACR_NAME=$ACR_NAME"
          echo "NAMESPACE=$NAMESPACE"
          {
           echo "RESOURCE_GROUP=$RESOURCE_GROUP"
           echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME"
           echo "ACR_NAME=$ACR_NAME"
           echo "NAMESPACE=$NAMESPACE"
          } >> $GITHUB_ENV

      # Step 2: Azure Login (OIDC)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
         
      - name: Create Resource Group
        run: |
          echo "Creating Resource Group if not exists..."
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "eastus"

      - name: Create AKS Cluster
        run: |
          echo "Creating AKS Cluster if not exists..."
          az aks show --name "${{ env.AKS_CLUSTER_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1 || \
          az aks create \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "${{ env.AKS_CLUSTER_NAME }}" \
          --node-count 1 \
          --enable-addons monitoring \
          --generate-ssh-keys \
          --enable-managed-identity

          # Step 3: Set AKS Context
      - name: Set AKS Context
        run: |
          echo "Setting AKS context..."
          echo "Resource Group: ${{ env.RESOURCE_GROUP }}"
          echo "AKS Cluster: ${{ env.AKS_CLUSTER_NAME }}"
          az aks get-credentials --resource-group "${{ env.RESOURCE_GROUP }}" --name "${{ env.AKS_CLUSTER_NAME }}" --overwrite-existing

             
      - name: Grant AKS access to ACR
        run: |
          echo "Granting AKS pull access to ACR..."
          ACR_ID=$(az acr show --name "${{ env.ACR_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" --query id --output tsv)
          AKS_ID=$(az aks show --name "${{ env.AKS_CLUSTER_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" --query identityProfile.kubeletidentity.clientId -o tsv)
          az role assignment create --assignee $AKS_ID --role "AcrPull" --scope $ACR_ID
            
       # Step 4: Build and Push Docker image
      - name: Build and Push Docker image
        run: |
          echo "Logging into Azure Container Registry..."
          az acr login --name ${{ env.ACR_NAME }}

          IMAGE_TAG=${{ github.run_number }}
          IMAGE_FULL_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          echo "Building image: $IMAGE_FULL_NAME"
          docker build -t $IMAGE_FULL_NAME .
          docker push $IMAGE_FULL_NAME

      # Step 5: Deploy to AKS
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/${{ secrets.DEPLOYMENT_NAME }} \
            ${{ secrets.CONTAINER_NAME }}=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.run_number }}
          kubectl rollout status deployment/${{ secrets.DEPLOYMENT_NAME }}
