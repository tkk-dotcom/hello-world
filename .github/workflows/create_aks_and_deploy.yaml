name: Create and Deploy to AKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: RG-AKS-Hello

    env:
      RESOURCE_GROUP: RG-AKS-Hello
      AKS_CLUSTER_NAME: aks-hello-world
      ACR_NAME: myakshelloregitry123
      IMAGE_NAME: hello-world
      NAMESPACE: default
      DEPLOYMENT_FILE_URL: https://raw.githubusercontent.com/<your-github-username>/hello-world/main/deployment.yaml
      SERVICE_FILE_URL: https://raw.githubusercontent.com/<your-github-username>/hello-world/main/service.yaml



    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
   # ✅ Step: Sanitize and Validate JSON
      - name: Sanitize and Validate aks-parameters.json
        run: |
          echo "Sanitizing JSON file..."
          sed -i '1s/^\xEF\xBB\xBF//' aks-parameters.json
          echo "Validating JSON syntax..."
          cat aks-parameters.json | jq . >/dev/null
          echo "✅ JSON is valid and clean."

      # Step 2: Load parameters from JSON
      - name: Load parameters from JSON
        id: load_params
        shell: bash
        run: |
          echo "Reading deployment parameters..."
          cat aks-parameters.json

          echo "Validating JSON structure..."
          jq . aks-parameters.json

          echo "Extracting values..."
          RESOURCE_GROUP=$(jq -r '.parameters.resourceGroup.value' aks-parameters.json)
          AKS_CLUSTER_NAME=$(jq -r '.parameters.aksClusterName.value' aks-parameters.json)
          ACR_NAME=$(jq -r '.parameters.acrName.value' aks-parameters.json)
          NAMESPACE=$(jq -r '.parameters.namespace.value' aks-parameters.json)

          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME" >> $GITHUB_ENV
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
        
        # Step 3: Azure Login (OIDC)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
         
      # Step 4: Create Resource Group if not exists
      - name: Create Resource Group
        run: |
          echo "Creating Resource Group if not exists..."
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "eastus"

      # Step 5: Create AKS Cluster if not exists
      - name: Create AKS Cluster
        run: |
          echo "Checking if AKS Cluster exists..."
          if ! az aks show --name "${{ env.AKS_CLUSTER_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating AKS Cluster..."
            az aks create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.AKS_CLUSTER_NAME }}" \
              --node-count 1 \
              --generate-ssh-keys \
              --enable-managed-identity \
              --location "eastus"
          else
            echo "AKS Cluster already exists."
          fi

      # Step 6: Set AKS context
      - name: Set AKS Context
        run: |
          echo "Setting AKS context..."
          az aks get-credentials --resource-group "${{ env.RESOURCE_GROUP }}" --name "${{ env.AKS_CLUSTER_NAME }}" --overwrite-existing

      # Step 7: Ensure Namespace Exists
      - name: Ensure Namespace Exists
        run: |
          kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}

      # Step 8: Ensure ACR Exists
      - name: Create Azure Container Registry if not exists
        run: |
          echo "Checking if ACR exists..."
          if ! az acr show --name "${{ env.ACR_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1; then
            echo "Creating Azure Container Registry..."
            az acr create \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.ACR_NAME }}" \
              --sku Basic \
              --admin-enabled true
             echo "acr_exists=false" >> $GITHUB_OUTPUT
           else
             echo "ACR already exists."
             echo "acr_exists=true" >> $GITHUB_OUTPUT
           fi

        # Step 9: Login to ACR
      - name: Login to Azure Container Registry
        run: echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ env.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin

        # Step 10: Build and Push Docker Image
      - name: Build and Push Docker image
        run: |
          echo "Building Docker image..."
          IMAGE_TAG=${{ github.run_number }}
          IMAGE_FULL_NAME=${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:$IMAGE_TAG

          docker build -t $IMAGE_FULL_NAME .
          docker push $IMAGE_FULL_NAME

          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "✅ Docker image pushed: $IMAGE_FULL_NAME"

          - name: Set AKS context
            uses: azure/aks-set-context@v4
            with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

          - name: Validate Kubernetes Access
            run: |
              echo "Checking access to AKS..."
              kubectl get nodes

          - name: Download Kubernetes Manifests using wget
            run: |
              echo "Downloading manifest files from GitHub..."
              wget ${{ env.DEPLOYMENT_FILE_URL }} -O deployment.yaml
              wget ${{ env.SERVICE_FILE_URL }} -O service.yaml

              echo "Downloaded files:"
              ls -l *.yaml

          - name: Apply Kubernetes Manifests
            run: |
              echo "Applying Kubernetes deployment and service..."
              kubectl apply -f deployment.yaml --validate=true -v=3
              kubectl apply -f service.yaml --validate=true -v=3

          - name: Verify Deployment Rollout
            run: |
              echo "Verifying rollout status..."
              kubectl rollout status deployment/hello-world

          - name: Get Service External IP
            run: |
              echo "Getting external IP for LoadBalancer service..."
              kubectl get svc hello-world
