name: create-and-deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: RG-AKS-Hello
   
    env:
      RESOURCE_GROUP: RG-AKS-Hello
      AKS_CLUSTER_NAME: aks-hello-world
      ACR_NAME: myakshelloregitry123
      NAMESPACE: default


    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 1: Load parameters
      - name: Load parameters from JSON
        id: load_params
        shell: bash
        run: |
          echo "Reading deployment parameters..."
          echo "File content:"
          cat aks-parameters.json

          echo "Validating JSON structure..."
          jq . aks-parameters.json

          echo "Extracting values..."
          RESOURCE_GROUP=$(jq -r '.parameters.resourceGroup.value' aks-parameters.json)
          AKS_CLUSTER_NAME=$(jq -r '.parameters.aksClusterName.value' aks-parameters.json)
          ACR_NAME=$(jq -r '.parameters.acrName.value' aks-parameters.json)
          NAMESPACE=$(jq -r '.parameters.namespace.value' aks-parameters.json)

          echo "RESOURCE_GROUP=$RESOURCE_GROUP"
          echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME"
          echo "ACR_NAME=$ACR_NAME"
          echo "NAMESPACE=$NAMESPACE"
          {
           echo "RESOURCE_GROUP=$RESOURCE_GROUP"
           echo "AKS_CLUSTER_NAME=$AKS_CLUSTER_NAME"
           echo "ACR_NAME=$ACR_NAME"
           echo "NAMESPACE=$NAMESPACE"
          } >> $GITHUB_ENV

      # Step 2: Azure Login (OIDC)
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

         # Step 3:  Create Resource group
      - name: Create Resource Group
        run: |
          echo "Creating Resource Group if not exists..."
          az group create --name "${{ env.RESOURCE_GROUP }}" --location "eastus"
          
         # Step 4: Create AKS Cluster
      - name: Create AKS Cluster
        run: |
          echo "Creating AKS Cluster if not exists..."
          az aks show --name "${{ env.AKS_CLUSTER_NAME }}" --resource-group "${{ env.RESOURCE_GROUP }}" >/dev/null 2>&1 || \
          az aks create \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --name "${{ env.AKS_CLUSTER_NAME }}" \
          --node-count 1 \
          --enable-addons monitoring \
          --generate-ssh-keys \
          --enable-managed-identity

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing

      - name: Deploy Hello World App
        run: |
          cat > hello-deployment.yaml <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: $APP_NAME
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: $APP_NAME
            template:
              metadata:
                labels:
                  app: $APP_NAME
              spec:
                containers:
                - name: $APP_NAME
                  image: $IMAGE_NAME
                  ports:
                  - containerPort: $PORT
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${APP_NAME}-service
          spec:
            type: LoadBalancer
            selector:
              app: $APP_NAME
            ports:
            - port: 80
              targetPort: $PORT
          EOF

          kubectl apply -f hello-deployment.yaml
          kubectl get service ${APP_NAME}-service
