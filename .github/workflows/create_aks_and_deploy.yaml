name: Create AKS and Deploy App

on:
  push:
    branches: [ main ]

permissions:
    contents: read

env:
  RG_NAME: myResourceGroup
  ACR_NAME: myContainerRegistry
  AKS_NAME: myKubernetesCluster
  LOCATION: eastus

jobs:
  create-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      # Step 1: Login to Azure
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
              auth-type:'OIDC'
                             
      - name: Set Azure Cloud 
        run: az cloud set -n AzureCloud

      - name: Verify Azure Login
        run: |
          az account show
          az cloud show

      # Step 2: Create Resource Group, ACR, and AKS
      - name: Create Azure Resources
        run: |
            az group create --name $RG_NAME --location $LOCATION
            az acr create --resource-group $RG_NAME --name $ACR_NAME --sku Basic
            az aks create --resource-group $RG_NAME --name $AKS_NAME --node-count 1 --enable-addons monitoring --generate-ssh-keys

      - name: Get ACR Login Server dynamically
        id: acrLoginServer
        run: echo "loginServer=$(az acr show --name $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      - name: ACR Login
        run: az acr login --nameÂ $ACR_NAME

      # Step 3: Get ACR login server dynamically
      - name: Get ACR Login Server
        id: acr
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "ACR login server: $(az acr show -n $ACR_NAME --query loginServer -o tsv)"
            echo "ACR_LOGIN_SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_ENV

      # Step 4: Login to ACR
      - name: ACR login
        uses: azure/cli@v2
        with:
          inlineScript: |
            az acr login -n $ACR_NAME

      # Step 5: Build and Push Docker Image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:latest

      # Step 6: Get AKS context
      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.AKS }}

      # Step 7: Deploy Application to AKS
      - name: Deploy to AKS
        uses: Azure/k8s-deploy@v4
        with:
          manifests: |
            k8s/hello.yaml
          images: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          strategy: basic
